{"version":3,"sources":["components/StreamSelector.jsx","components/TwitchChat.jsx","components/TwitchPlayer.jsx","containers/TwitchLite.jsx","App.js","serviceWorker.js","index.js"],"names":["StreamSelector","onStreamNameChange","e","target","value","_this","props","streamName","detail","event","CustomEvent","window","dispatchEvent","_this2","this","react_default","a","createElement","className","htmlFor","type","name","id","defaultValue","onFocus","select","onBlur","onKeyUp","keyCode","React","Component","TwitchChat","getIFrameSource","channel","concat","src","frameBorder","TwitchPlayer","allowFullScreen","TwitchLite","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getQuery","queryValue","URLSearchParams","location","search","get","localStorage","getItem","setQuery","stream","setItem","params","set","history","replaceState","pathname","changeStream","setState","state","addEventListener","components_TwitchPlayer","components_StreamSelector","components_TwitchChat","App","containers_TwitchLite","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a231963e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass StreamSelector extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='StreamSelector'>\r\n                <label htmlFor='stream'>Stream:&nbsp;&nbsp;</label>\r\n                <input\r\n                    type='text'\r\n                    name='stream'\r\n                    id='stream'\r\n                    defaultValue={this.props.streamName}\r\n                    onFocus={e => e.target.select()}\r\n                    onBlur={this.onStreamNameChange}\r\n                    onKeyUp={e => e.keyCode && e.keyCode === 13 && this.onStreamNameChange(e)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onStreamNameChange = (e) => {\r\n        if (e.target.value === this.props.streamName) return;\r\n\r\n        const detail = { streamName: e.target.value };\r\n        const event = new CustomEvent('streamChange', { detail });\r\n        window.dispatchEvent(event);\r\n    }\r\n}\r\n\r\nexport default StreamSelector;\r\n","import React from 'react';\r\n\r\nclass TwitchChat extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='TwitchChat'>\r\n                <iframe\r\n                    src={this.getIFrameSource(this.props.streamName)}\r\n                    frameBorder='0'\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getIFrameSource = (channel) => `https://www.twitch.tv/embed/${channel}/chat?darkpopout`;\r\n}\r\n\r\nexport default TwitchChat;\r\n","import React from 'react';\r\n\r\nclass TwitchPlayer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='TwitchPlayer'>\r\n                <iframe\r\n                    src={this.getIFrameSource(this.props.streamName)}\r\n                    frameBorder='0'\r\n                    allowFullScreen\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getIFrameSource = (channel) => `https://player.twitch.tv/?volume=0.3&channel=${channel}`;\r\n}\r\n\r\nexport default TwitchPlayer;\r\n","import React from 'react';\r\n\r\nimport StreamSelector from '../components/StreamSelector';\r\nimport TwitchChat from '../components/TwitchChat';\r\nimport TwitchPlayer from '../components/TwitchPlayer';\r\n\r\nclass TwitchLite extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            streamName: this.getQuery() || 'monstercat'\r\n        }\r\n\r\n        window.addEventListener('streamChange', (e) => {\r\n            this.setQuery(e.detail.streamName);\r\n            this.changeStream(e.detail.streamName);\r\n        })\r\n    }\r\n\r\n    getQuery = () => {\r\n        const queryValue = (new URLSearchParams(window.location.search)).get('stream');\r\n        if (!queryValue) {\r\n            return window.localStorage.getItem('stream') || null;\r\n        }\r\n        return queryValue;\r\n    }\r\n\r\n    setQuery = (stream) => {\r\n        window.localStorage.setItem('stream', stream);\r\n        const params = new URLSearchParams(window.location.search);\r\n        params.set('stream', stream);\r\n        window.history.replaceState({}, '', `${window.location.pathname}?${params}`);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='TwitchLite grid'>\r\n                <TwitchPlayer streamName={this.state.streamName} />\r\n                <div className='chatPanel'>\r\n                    <StreamSelector streamName={this.state.streamName} />\r\n                    <TwitchChat streamName={this.state.streamName} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    changeStream = (streamName) => {\r\n        this.setState({ streamName });\r\n    }\r\n}\r\n\r\nexport default TwitchLite;\r\n","import React from 'react';\nimport './App.css';\n\nimport TwitchLite from './containers/TwitchLite';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<TwitchLite></TwitchLite>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}