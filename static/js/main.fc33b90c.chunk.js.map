{"version":3,"sources":["api/requests.js","components/ViewerCount.jsx","components/StreamSelector.jsx","components/TwitchChat.jsx","components/TwitchPlayer.jsx","containers/TwitchLite.jsx","App.js","serviceWorker.js","index.js"],"names":["CLIENT_ID","CACHE","Map","getChannelData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","channelName","item","wrap","_context2","prev","next","has","get","timestamp","Date","now","abrupt","data","Promise","_ref2","_callee","resolve","reject","channelId","_context","getChannelIdByDisplayName","sent","fetch","concat","method","headers","Content-Type","Client-ID","then","response","json","set","catch","e","stop","_x2","_x3","apply","this","arguments","_x","_ref3","_callee3","displayName","_context3","searchChannelsByDisplayName","channels","_id","_x4","_ref4","_callee4","channel","_context4","query","encodeURI","_x5","ViewerCount","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","channelData","streamId","setState","live","type","react_default","createElement","className","title","width","height","viewBox","cx","cy","r","viewer_count","React","Component","StreamSelector","addToSavedList","preventDefault","stream","target","value","list","getSavedList","add","saveSavedList","changeStream","ref","event","CustomEvent","detail","streamName","window","dispatchEvent","localStorage","getItem","JSON","parse","sort","savedList","Set","toConsumableArray","handleEnter","keyCode","stopPropagation","onStreamNameChange","removeFromSavedList","delete","setItem","stringify","forceUpdate","toggleFavourites","favouritesOpen","_this2","favourites","map","key","onClick","components_ViewerCount","onSubmit","htmlFor","id","name","defaultValue","onBlur","onFocus","select","onKeyDown","onKeyUp","length","TwitchChat","getIFrameSource","src","frameBorder","TwitchPlayer","allowFullScreen","DEFAULT_STREAM","TwitchLite","getQuery","queryValue","URLSearchParams","location","search","setQuery","params","history","replaceState","pathname","toggleChatVisibility","chatHidden","addEventListener","components_TwitchPlayer","components_StreamSelector","components_TwitchChat","App","containers_TwitchLite","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fc33b90c.chunk.js","sourcesContent":["const PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\r\n// twitch api client id -> https://dev.twitch.tv/console/apps/\r\nconst CLIENT_ID = 'yotu3p1ebkzuqov5hy49v1tvtdcvem';\r\n\r\nconst CACHE = new Map(); // [key: {data, timestamp}]\r\nconst CACHE_EXPIRY_MS = 5 * 60 * 1000;\r\n\r\nexport const getChannelData = async (channelName) => {\r\n\r\n    if (CACHE.has(channelName)) {\r\n        const item = CACHE.get(channelName);\r\n        if (item.timestamp > Date.now() - CACHE_EXPIRY_MS) {\r\n            return item.data;\r\n        }\r\n    }\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n        const channelId = await getChannelIdByDisplayName(channelName);\r\n        fetch(`https://api.twitch.tv/helix/streams?user_id=${channelId}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Client-ID': CLIENT_ID,\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                CACHE.set(channelName, { data: json.data[0], timestamp: Date.now() })\r\n                return json;\r\n            })\r\n            .then(json => resolve(json.data[0]))\r\n            .catch((e) => reject(`getChannelData rejected (${channelName})` + e));\r\n    });\r\n};\r\n\r\nconst getChannelIdByDisplayName = async (displayName) =>\r\n    (await searchChannelsByDisplayName(displayName)).channels[0]._id;\r\n\r\n\r\nconst searchChannelsByDisplayName = async (channel) => {\r\n    return new Promise((resolve, reject) => {\r\n        const query = encodeURI(channel);\r\n        fetch(PROXY_URL + `https://api.twitch.tv/kraken/search/channels?query=${query}&limit=1`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Client-ID': CLIENT_ID,\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => resolve(json))\r\n            .catch((e) => reject(`searchChannelsByDisplayName rejected (${channel})` + e));\r\n    });\r\n};\r\n","import React from 'react';\r\n\r\nimport { getChannelData } from '../api/requests';\r\n\r\nclass ViewerCount extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            channelData: null,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const channelData = await getChannelData(this.props.streamId);\r\n        channelData && this.setState({\r\n            channelData,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.channelData) return null;\r\n\r\n        const live = (this.state.channelData.type === 'live') ? ' live' : '';\r\n        return (\r\n            <span className='ViewerCount' title={this.state.channelData.title}>\r\n                <span className={'circle' + live}>\r\n                    <svg width=\"10\" height=\"10\" viewBox=\"0 0 10 10\">\r\n                        <circle cx=\"5\" cy=\"5\" r=\"5\" />\r\n                    </svg>\r\n                </span>\r\n                <span className='count'>{this.state.channelData.viewer_count}</span>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewerCount;\r\n","import React from 'react';\r\n\r\nimport ViewerCount from './ViewerCount';\r\n\r\nclass StreamSelector extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            favouritesOpen: false,\r\n            savedList: [],\r\n        };\r\n        this.ref = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getSavedList();\r\n    }\r\n\r\n    render() {\r\n        const favourites = [...this.state.savedList].map(stream =>\r\n            <li key={stream}>\r\n                <span\r\n                    className='stream'\r\n                    onClick={() => this.changeStream(stream)}\r\n                >\r\n                    {stream}\r\n                </span>\r\n                <ViewerCount streamId={stream}></ViewerCount>\r\n                <button\r\n                    title='Remove from Favourites list'\r\n                    onClick={() => this.removeFromSavedList(stream)}\r\n                >\r\n                    Remove\r\n                </button>\r\n            </li>\r\n        );\r\n\r\n        return (\r\n            <form className='StreamSelector' onSubmit={this.addToSavedList}>\r\n                <label htmlFor='stream'>Stream:</label>\r\n                <span className='streamInputContainer'>\r\n                    <input\r\n                        ref={ref => this.ref = ref}\r\n                        id='stream'\r\n                        name='stream'\r\n                        type='text'\r\n                        defaultValue={this.props.streamName}\r\n                        onBlur={this.onStreamNameChange}\r\n                        onFocus={e => e.target.select()}\r\n                        onKeyDown={this.handleEnter}\r\n                        onKeyUp={this.handleEnter}\r\n                    />\r\n                    <button type='submit' title='Add to Favourites'>+</button>\r\n                </span>\r\n                <button\r\n                    type='button'\r\n                    className={this.state.favouritesOpen ? 'open' : ''}\r\n                    title={(this.state.favouritesOpen ? 'Open' : 'Close') + ' Favourites list'}\r\n                    onClick={this.toggleFavourites}>\r\n                    v\r\n                </button>\r\n                {this.state.favouritesOpen &&\r\n                    <div className='favourites'>\r\n                        <small>Favourites list</small>\r\n                        <ul>\r\n                            {favourites.length ? favourites : '- no favourites saved -'}\r\n                        </ul>\r\n                    </div>\r\n                }\r\n            </form>\r\n        );\r\n    }\r\n\r\n    addToSavedList = (e) => {\r\n        e.preventDefault();\r\n        const stream = e.target.stream.value;\r\n        const list = this.getSavedList();\r\n        list.add(stream);\r\n        this.saveSavedList(list);\r\n    }\r\n\r\n    changeStream = (stream) => {\r\n        if (this.ref) {\r\n            this.ref.value = stream;\r\n        }\r\n        const event = new CustomEvent('streamChange', { detail: { streamName: stream } });\r\n        window.dispatchEvent(event);\r\n    }\r\n\r\n    getSavedList = () => {\r\n        const json = window.localStorage.getItem('savedList') || '[]';\r\n        const list = JSON.parse(json).sort();\r\n        this.setState({ savedList: new Set([...list]) });\r\n    }\r\n\r\n    handleEnter = (e) => {\r\n        if (e.keyCode && e.keyCode === 13) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this.onStreamNameChange(e);\r\n        }\r\n    }\r\n\r\n    onStreamNameChange = (e) => {\r\n        e.preventDefault();\r\n        if (e.target.value !== this.props.streamName) {\r\n            this.changeStream(e.target.value);\r\n        }\r\n    }\r\n\r\n    removeFromSavedList = (stream) => {\r\n        const list = this.getSavedList();\r\n        list.delete(stream);\r\n        this.saveSavedList(list);\r\n    }\r\n\r\n    saveSavedList = (list) => {\r\n        window.localStorage.setItem('savedList', JSON.stringify([...list]));\r\n        this.forceUpdate();\r\n    }\r\n\r\n    toggleFavourites = () => {\r\n        this.setState({ favouritesOpen: !this.state.favouritesOpen });\r\n    }\r\n}\r\n\r\nexport default StreamSelector;\r\n","import React from 'react';\r\n\r\nclass TwitchChat extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='TwitchChat'>\r\n                <iframe\r\n                    title='Twitch Chat'\r\n                    src={this.getIFrameSource(this.props.streamName)}\r\n                    frameBorder='0'\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getIFrameSource = (channel) => `https://www.twitch.tv/embed/${channel}/chat?darkpopout`;\r\n}\r\n\r\nexport default TwitchChat;\r\n","import React from 'react';\r\n\r\nclass TwitchPlayer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='TwitchPlayer'>\r\n                <iframe\r\n                    title='Twitch Player'\r\n                    src={this.getIFrameSource(this.props.streamName)}\r\n                    frameBorder='0'\r\n                    allowFullScreen\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getIFrameSource = (channel) => `https://player.twitch.tv/?volume=0.3&channel=${channel}`;\r\n}\r\n\r\nexport default TwitchPlayer;\r\n","import React from 'react';\r\n\r\nimport StreamSelector from '../components/StreamSelector';\r\nimport TwitchChat from '../components/TwitchChat';\r\nimport TwitchPlayer from '../components/TwitchPlayer';\r\n\r\nconst DEFAULT_STREAM = 'monstercat'\r\n\r\nclass TwitchLite extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            streamName: this.getQuery() || DEFAULT_STREAM,\r\n            chatHidden: false,\r\n        };\r\n\r\n        window.addEventListener('streamChange', (e) => {\r\n            this.setQuery(e.detail.streamName);\r\n            this.setState({ streamName: e.detail.streamName });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'TwitchLite grid' + (this.state.chatHidden ? ' hide-chat' : '')}>\r\n                <div className=\"playerPanel\">\r\n                    <TwitchPlayer streamName={this.state.streamName} />\r\n                    <div className=\"hideChatToggle\" onClick={this.toggleChatVisibility}>\r\n                        <span>{this.state.chatHidden ? 'Show' : 'Hide'}</span>\r\n                    </div>\r\n                </div>\r\n                {!this.state.chatHidden && <div className='chatPanel'>\r\n                    <StreamSelector streamName={this.state.streamName} />\r\n                    <TwitchChat streamName={this.state.streamName} />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getQuery = () => {\r\n        const queryValue = (new URLSearchParams(window.location.search)).get('stream');\r\n        if (!queryValue) {\r\n            return window.localStorage.getItem('lastWatched') || null;\r\n        }\r\n        return queryValue;\r\n    }\r\n\r\n    setQuery = (stream) => {\r\n        window.localStorage.setItem('lastWatched', stream);\r\n        const params = new URLSearchParams(window.location.search);\r\n        params.set('stream', stream);\r\n        window.history.replaceState({}, '', `${window.location.pathname}?${params}`);\r\n    };\r\n\r\n    toggleChatVisibility = () => {\r\n        this.setState({ chatHidden: !this.state.chatHidden });\r\n    }\r\n}\r\n\r\nexport default TwitchLite;\r\n","import React from 'react';\nimport './App.css';\n\nimport TwitchLite from './containers/TwitchLite';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<TwitchLite></TwitchLite>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}